---
- name: Install PostgreSQL and Zabbix server (PostgreSQL)
  ansible.builtin.yum:
    name:
      - postgresql-server
      - postgresql
      - zabbix-server-pgsql
      - zabbix-sql-scripts
    state: present

- name: Initialize PostgreSQL database
  ansible.builtin.command: postgresql-setup --initdb
  args:
    creates: /var/lib/pgsql/data/PG_VERSION

- name: Update PostgreSQL listen_addresses to allow connections from other machines
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: /var/lib/pgsql/data/postgresql.conf
    mode: '0644'
    owner: postgres
    group: postgres
  notify: reload postgresql

- name: Deploy pg_hba.conf with access to Zabbix frontend
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: /var/lib/pgsql/data/pg_hba.conf
    mode: '0600'
    owner: postgres
    group: postgres
  notify: reload postgresql

- name: Ensure PostgreSQL and Zabbix server are started and enabled
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - postgresql
    - zabbix-server

- name: Wait for PostgreSQL to accept connections
  become: yes
  become_user: postgres
  ansible.builtin.shell: |
    until pg_isready -q; do sleep 1; done

- name: Create Zabbix user and database if not exists
  become: yes
  become_user: postgres
  ansible.builtin.shell: |
    psql -tc "SELECT 1 FROM pg_roles WHERE rolname='{{ zabbix_db_user }}'" | grep -q 1 || \
    psql -c "CREATE ROLE {{ zabbix_db_user }} WITH LOGIN PASSWORD '{{ zabbix_db_password }}';"
    psql -tc "SELECT 1 FROM pg_database WHERE datname='{{ zabbix_db_name }}'" | grep -q 1 || \
    psql -c "CREATE DATABASE {{ zabbix_db_name }} OWNER {{ zabbix_db_user }};"

- name: Import initial schema as postgres user
  become: yes
  become_user: postgres
  ansible.builtin.shell: |
    gzip -dc /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz | \
    psql {{ zabbix_db_name }}

- name: Open Zabbix server port
  ansible.builtin.firewalld:
    port: 10051/tcp
    permanent: true
    state: enabled
    immediate: yes
  notify: reload postgresql
